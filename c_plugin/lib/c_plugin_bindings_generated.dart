// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie = _lookup<ffi.UintPtr>(
    '__security_cookie',
  );

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  /// very short-lived
  int sum(int a, int b) {
    return _sum(a, b);
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// longer-lived
  int sum_long_running(int a, int b) {
    return _sum_long_running(a, b);
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
        'sum_long_running',
      );
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  /// compile-time OpenCV version
  ffi.Pointer<ffi.Char> get_opencv_version() {
    return _get_opencv_version();
  }

  late final _get_opencv_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
        'get_opencv_version',
      );
  late final _get_opencv_version =
      _get_opencv_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// find up to max_regions bright blobs in an NV21 frame
  void detect_bright_regions(
    ffi.Pointer<ffi.Uint8> nv21_data,
    int width,
    int height,
    int threshold,
    int max_regions,
    ffi.Pointer<ffi.Int> bbox_out,
    ffi.Pointer<ffi.Int> count_out,
  ) {
    return _detect_bright_regions(
      nv21_data,
      width,
      height,
      threshold,
      max_regions,
      bbox_out,
      count_out,
    );
  }

  late final _detect_bright_regionsPtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Uint8>,
        ffi.Int,
        ffi.Int,
        ffi.Uint8,
        ffi.Int,
        ffi.Pointer<ffi.Int>,
        ffi.Pointer<ffi.Int>,
      )
    >
  >('detect_bright_regions');
  late final _detect_bright_regions =
      _detect_bright_regionsPtr
          .asFunction<
            void Function(
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
            )
          >();

  /// returns 1 if LED is on in ROI, else 0
  int detect_led_on(
    ffi.Pointer<ffi.Uint8> nv21_data,
    int width,
    int height,
    int threshold,
    int x,
    int y,
    int w,
    int h,
  ) {
    return _detect_led_on(nv21_data, width, height, threshold, x, y, w, h);
  }

  late final _detect_led_onPtr = _lookup<
    ffi.NativeFunction<
      ffi.Uint8 Function(
        ffi.Pointer<ffi.Uint8>,
        ffi.Int,
        ffi.Int,
        ffi.Uint8,
        ffi.Int,
        ffi.Int,
        ffi.Int,
        ffi.Int,
      )
    >
  >('detect_led_on');
  late final _detect_led_on =
      _detect_led_onPtr
          .asFunction<
            int Function(
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              int,
              int,
              int,
              int,
            )
          >();

  void process_frame(
    ffi.Pointer<ffi.Uint8> y_plane,
    int width,
    int height,
    int row_stride,
    int x0,
    int y0,
    int w,
    int h,
    ffi.Pointer<ffi.Double> out_values,
  ) {
    return _process_frame(
      y_plane,
      width,
      height,
      row_stride,
      x0,
      y0,
      w,
      h,
      out_values,
    );
  }

  late final _process_framePtr = _lookup<
    ffi.NativeFunction<
      ffi.Void Function(
        ffi.Pointer<ffi.Uint8>,
        ffi.Int32,
        ffi.Int32,
        ffi.Int32,
        ffi.Int32,
        ffi.Int32,
        ffi.Int32,
        ffi.Int32,
        ffi.Pointer<ffi.Double>,
      )
    >
  >('process_frame');
  late final _process_frame =
      _process_framePtr
          .asFunction<
            void Function(
              ffi.Pointer<ffi.Uint8>,
              int,
              int,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Double>,
            )
          >();
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;
