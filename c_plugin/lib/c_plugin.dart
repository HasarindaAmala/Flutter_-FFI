// lib/c_plugin.dart

import 'dart:ffi';
import 'dart:io' show Platform;
import 'package:ffi/ffi.dart';
import 'c_plugin_bindings_generated.dart';

/// Loads the correct dynamic library for the current platform.
final DynamicLibrary _dylib = () {
  if (Platform.isAndroid || Platform.isLinux) {
    // Android & Linux use a .so
    return DynamicLibrary.open('libc_plugin.so');
  } else if (Platform.isWindows) {
    // Windows uses a .dll
    return DynamicLibrary.open('c_plugin.dll');
  } else if (Platform.isMacOS || Platform.isIOS) {
    // On Apple platforms, plugins are linked into the main process
    return DynamicLibrary.process();
  }
  throw UnsupportedError('Unsupported platform: ${Platform.operatingSystem}');
}();

/// The FFI bindings generated by ffigen, based on c_plugin_bindings.h
final CPluginBindings _bindings = CPluginBindings(_dylib);

/// A simple wrapper around the native `int sum(int a, int b)` function.
int sum(int a, int b) => _bindings.sum(a, b);

/// Calls the native `const char* get_opencv_version()` function
/// and converts the returned C string to a Dart `String`.
String getOpenCvVersion() {
  final Pointer<Utf8> verPtr = _bindings.get_opencv_version();
  if (verPtr == nullptr) {
    throw StateError('Failed to retrieve OpenCV version');
  }
  return verPtr.toDartString();
}
